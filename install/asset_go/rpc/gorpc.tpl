// Code generated by hitzhangjie/gorpc-cli. DO NOT EDIT.
// source: {{.Protofile}}

{{ $pkgName := .PackageName -}}
{{ $goPkgName := .PackageName|gopkg -}}
{{ $appName := .AppName -}}
{{ $serverName := .ServerName -}}
{{- $goPkgOption := "" -}}
{{- with .FileOptions.go_package -}}
  {{- $goPkgOption = . -}}
  {{- $goPkgName = (splitList "/" $goPkgOption)|last|gopkg -}}
{{- end -}}
package {{ $goPkgName }}

import (
	"context"

   _ "github.com/hitzhangjie/gorpc"
   _ "github.com/hitzhangjie/gorpc/http"

   	{{ if and (ne .Protocol "gorpc") (ne .Protocol "http") }}
   	_ "github.com/hitzhangjie/gorpc-codec/{{.Protocol}}"
   	{{ end }}

    "github.com/hitzhangjie/gorpc/server"
    "github.com/hitzhangjie/gorpc/client"
    "github.com/hitzhangjie/gorpc/codec"

    {{ range .Imports }}
    {{ if ne $goPkgName . }}
    "{{ . }}"
    {{ end }}
    {{ end }}
)

/* ************************************ Service Definition ************************************ */

{{ range $service := .Services }}
{{- $svrName := $service.Name -}}
{{- $svrNameCamelCase := $service.Name|camelcase -}}
// {{$svrNameCamelCase}}Service defines service
type {{$svrNameCamelCase}}Service interface {

	{{ range $rpc := $service.RPC }}
	{{- $rpcName := .Name | camelcase -}}
	{{- $rpcReqType := (simplify (gofulltype .RequestType $.FileDescriptor) $goPkgName)|export }}
	{{- $rpcRspType := (simplify (gofulltype .ResponseType $.FileDescriptor) $goPkgName)|export }}
	{{ with .LeadingComments }}// {{$rpcName}} {{.}}{{ end }}
	{{$rpcName}}(ctx context.Context, req *{{$rpcReqType}},rsp *{{$rpcRspType}}) (err error) {{ with .TrailingComments}}// {{.}}{{ end }}
{{ end -}}
}

{{range $service.RPC -}}
{{- $rpcName := .Name | camelcase -}}
{{- $rpcReqType := (simplify (gofulltype .RequestType $.FileDescriptor) $goPkgName)|export }}
{{- $rpcRspType := (simplify (gofulltype .ResponseType $.FileDescriptor) $goPkgName)|export }}
func {{$svrNameCamelCase}}Service_{{$rpcName}}_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

    req := &{{$rpcReqType}}{}
	rsp := &{{$rpcRspType}}{}
	filters, err := f(req)
    if err != nil {
    	return nil, err
    }
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
	    return svr.({{$svrNameCamelCase}}Service).{{$rpcName}}(ctx, reqbody.(*{{$rpcReqType}}), rspbody.(*{{$rpcRspType}}))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

{{end -}}

// {{$svrNameCamelCase}}Server_ServiceDesc descriptor for server.RegisterService
var {{$svrNameCamelCase}}Server_ServiceDesc = server.ServiceDesc {
    ServiceName: "{{$pkgName}}.{{$svrName}}",
    HandlerType: ((*{{$svrNameCamelCase}}Service)(nil)),
    Methods: []server.Method{
        {{- range $service.RPC}}
        {{- $rpcName := .Name | camelcase -}}
	        {Name: "{{.FullyQualifiedCmd}}", Func: {{$svrNameCamelCase}}Service_{{$rpcName}}_Handler},
        {{- end}}
    },
}

// Register{{$svrNameCamelCase}}Service register service
func Register{{$svrNameCamelCase}}Service(s server.Service, svr {{$svrNameCamelCase}}Service) {
	s.Register(&{{$svrNameCamelCase}}Server_ServiceDesc, svr)
}

{{ end }}

/* ************************************ Client Definition ************************************ */

{{ range $service := .Services }}
{{ $svrNameCamelCase := $service.Name | camelcase }}
// {{$svrNameCamelCase}}ClientProxy defines service client proxy
type {{$svrNameCamelCase}}ClientProxy interface {
	{{ range $rpc := $service.RPC}}
	{{- $rpcName := .Name | camelcase -}}
	{{- $rpcReqType := (simplify (gofulltype .RequestType $.FileDescriptor) $goPkgName)|export }}
   	{{- $rpcRspType := (simplify (gofulltype .ResponseType $.FileDescriptor) $goPkgName)|export }}
   	{{ with .LeadingComments }}// {{$rpcName}} {{.}}{{ end }}
	{{$rpcName}}(ctx context.Context, req *{{$rpcReqType}}, opts ...client.Option) (rsp *{{$rpcRspType}}, err error) {{ with .TrailingComments }}// {{.}}{{ end }}
{{ end -}}
}

type {{$svrNameCamelCase|untitle}}ClientProxyImpl struct{
	client client.Client
	opts []client.Option
}

var New{{$svrNameCamelCase}}ClientProxy = func(opts...client.Option) {{$svrNameCamelCase}}ClientProxy {
	return &{{$svrNameCamelCase|untitle}}ClientProxyImpl {client: client.DefaultClient, opts: opts}
}

{{range $idx, $rpc := $service.RPC}}
{{- $rpcName := .Name | camelcase -}}
{{- $rpcReqType := (simplify (gofulltype .RequestType $.FileDescriptor) $goPkgName)|export }}
{{- $rpcRspType := (simplify (gofulltype .ResponseType $.FileDescriptor) $goPkgName)|export }}
func (c *{{$svrNameCamelCase|untitle}}ClientProxyImpl) {{$rpcName}}(ctx context.Context, req *{{$rpcReqType}}, opts ...client.Option) (rsp *{{$rpcRspType}}, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName({{$svrNameCamelCase}}Server_ServiceDesc.Methods[{{$idx}}].Name)
	msg.WithCalleeServiceName({{$svrNameCamelCase}}Server_ServiceDesc.ServiceName)
	msg.WithCalleeApp("{{$appName}}")
	msg.WithCalleeServer("{{$serverName}}")
	msg.WithCalleeService("{{$service.Name}}")
	msg.WithCalleeMethod("{{$rpcName}}")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &{{$rpcRspType}}{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
	    return nil, err
	}
	codec.PutBackMessage(msg)

	return rsp, nil
}
{{end}}

{{ end }}
